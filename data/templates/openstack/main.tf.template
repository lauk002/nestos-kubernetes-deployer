terraform {
  required_version = ">= 0.14.0"
  required_providers {
    openstack = {
      source  = "XXXXXXXXXX"
    }
  }
}

provider "openstack" {
  user_name   = "{{.Openstack.User_name}}"
  password    = "{{.Openstack.Password}}"
  tenant_name = "{{.Openstack.Tenant_name}}"
  auth_url    = "{{.Openstack.Auth_url}}"
  region      = "{{.Openstack.Region}}"
}

resource "openstack_compute_flavor_v2" "flavor" {
  name      = "{{.Flavor.Name}}"
  ram       = "{{.Flavor.Ram}}"
  vcpus     = "{{.Flavor.Vcpus}}"
  disk      = "{{.Flavor.Disk}}"
  is_public = "{{.Flavor.Is_public}}"
}

resource "openstack_compute_instance_v2" "instance" {
  count           = "{{.Instance.Count}}"
  name            = "{{.Instance.Name}}"
  image_name      = "{{.Instance.Image_name}}"
  flavor_name     = openstack_compute_flavor_v2.flavor.name
  key_pair        = "{{.Instance.Key_pair}}"
  security_groups = ["XXXXXXXXXX"]
  user_data       = "${file("XXXXXXXXXX")}"

  network {
    name = "XXXXXXXXXX"
  }
}

resource "openstack_networking_floatingip_v2" "floatip" {
  count = length(openstack_compute_instance_v2.instance)
  pool  = "{{.Floatip.Pool}}"
}

resource "openstack_compute_floatingip_associate_v2" "floatip" {
  count = length(openstack_compute_instance_v2.instance)
  instance_id = openstack_compute_instance_v2.instance.*.id[count.index]
  floating_ip = openstack_networking_floatingip_v2.floatip.*.address[count.index]
}

output "instance_info" {
  value = {
    floating_ip_addresses = openstack_networking_floatingip_v2.floatip.*.address
    instance_status = openstack_compute_instance_v2.instance.*.power_state
  }
}
