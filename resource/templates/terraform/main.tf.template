terraform {
  required_providers {
    openstack = {
      source = "terraform-provider-openstack/openstack"
      version = "1.52.1"
    }
  }
}

provider "openstack" {
  user_name   = "{{.Openstack.User_name}}"
  password    = "{{.Openstack.Password}}"
  tenant_name = "{{.Openstack.Tenant_name}}"
  auth_url    = "{{.Openstack.Auth_url}}"
  region      = "{{.Openstack.Region}}"
}

resource "openstack_images_image_v2" "image" {
  name                  = "{{.Image.Name}}"
  
  image_source_url      = "{{.Image.Image_source_url}}"
  image_source_username = "{{.Image.Image_source_username}}"
  image_source_password = "{{.Image.Image_source_password}}"
  web_download          = "{{.Image.Web_download}}"

  local_file_path       = "{{.Image.local_file_path}}"

  container_format      = "{{.Image.Container_format}}"
  disk_format           = "{{.Image.Disk_format}}"
}

resource "openstack_compute_flavor_v2" "flavor" {
  name      = "{{.Flavor.Name}}"
  ram       = "{{.Flavor.Ram}}"
  vcpus     = "{{.Flavor.Vcpus}}"
  disk      = "{{.Flavor.Disk}}"
  is_public = "{{.Flavor.Is_public}}"
}

resource "openstack_compute_keypair_v2" "keypair" {
  name       = "{{.Keypair.Name}}"
  public_key = "{{.Keypair.Public_key}}"
}

resource "openstack_compute_secgroup_v2" "secgroup" {
  name        = "{{.Secgroup.Name}}"
  description = "{{.Secgroup.Name}}"

  rule {
    from_port   = 22
    to_port     = 22
    ip_protocol = "tcp"
    cidr        = "0.0.0.0/0"
  }

  rule {
    from_port   = -1
    to_port     = -1
    ip_protocol = "icmp"
    cidr        = "0.0.0.0/0"
  }
}

resource "openstack_compute_instance_v2" "instance" {
  count           = "{{.Instance.Count}}"
  name            = "{{.Instance.Name}}"
  image_name      = openstack_images_image_v2.image.name
  flavor_name     = openstack_compute_flavor_v2.flavor.name
  key_pair        = openstack_compute_keypair_v2.keypair.name
  security_groups = [openstack_compute_secgroup_v2.secgroup.name]
  user_data       = "{{.Instance.User_data}}"

  network {
    name        = "{{.Instance.Network.Name}}"
  }
}

resource "openstack_networking_floatingip_v2" "floatip" {
  count = length(openstack_compute_instance_v2.instance)
  pool  = "{{.Floatip.Pool}}"
}

resource "openstack_compute_floatingip_associate_v2" "fip_associate" {
  count       = length(openstack_compute_instance_v2.instance)
  floating_ip = openstack_networking_floatingip_v2.floatip.*.address[count.index]
  instance_id = openstack_compute_instance_v2.instance.*.id[count.index]
}

output "instance_info" {
  value = {
    instance_status = openstack_compute_instance_v2.instance.*.power_state
    access_ip_v4    = openstack_compute_instance_v2.instance.*.access_ip_v4
    floating_ip     = openstack_networking_floatingip_v2.floatip.*.address
  }
}
